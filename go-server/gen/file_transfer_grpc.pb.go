// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: file_transfer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileTransferService_AdminFileTransfer_FullMethodName  = "/modernrat.FileTransferService/AdminFileTransfer"
	FileTransferService_ClientFileTransfer_FullMethodName = "/modernrat.FileTransferService/ClientFileTransfer"
)

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	// Stream that connects the admin console with user agents for file operations.
	AdminFileTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileTransferMessage, FileTransferMessage], error)
	// Stream that connects user agents to receive file transfer requests.
	ClientFileTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileTransferMessage, FileTransferMessage], error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) AdminFileTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileTransferMessage, FileTransferMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], FileTransferService_AdminFileTransfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileTransferMessage, FileTransferMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_AdminFileTransferClient = grpc.BidiStreamingClient[FileTransferMessage, FileTransferMessage]

func (c *fileTransferServiceClient) ClientFileTransfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileTransferMessage, FileTransferMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], FileTransferService_ClientFileTransfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileTransferMessage, FileTransferMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_ClientFileTransferClient = grpc.BidiStreamingClient[FileTransferMessage, FileTransferMessage]

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility.
type FileTransferServiceServer interface {
	// Stream that connects the admin console with user agents for file operations.
	AdminFileTransfer(grpc.BidiStreamingServer[FileTransferMessage, FileTransferMessage]) error
	// Stream that connects user agents to receive file transfer requests.
	ClientFileTransfer(grpc.BidiStreamingServer[FileTransferMessage, FileTransferMessage]) error
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileTransferServiceServer struct{}

func (UnimplementedFileTransferServiceServer) AdminFileTransfer(grpc.BidiStreamingServer[FileTransferMessage, FileTransferMessage]) error {
	return status.Errorf(codes.Unimplemented, "method AdminFileTransfer not implemented")
}
func (UnimplementedFileTransferServiceServer) ClientFileTransfer(grpc.BidiStreamingServer[FileTransferMessage, FileTransferMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ClientFileTransfer not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}
func (UnimplementedFileTransferServiceServer) testEmbeddedByValue()                             {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_AdminFileTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).AdminFileTransfer(&grpc.GenericServerStream[FileTransferMessage, FileTransferMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_AdminFileTransferServer = grpc.BidiStreamingServer[FileTransferMessage, FileTransferMessage]

func _FileTransferService_ClientFileTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).ClientFileTransfer(&grpc.GenericServerStream[FileTransferMessage, FileTransferMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileTransferService_ClientFileTransferServer = grpc.BidiStreamingServer[FileTransferMessage, FileTransferMessage]

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modernrat.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdminFileTransfer",
			Handler:       _FileTransferService_AdminFileTransfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientFileTransfer",
			Handler:       _FileTransferService_ClientFileTransfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "file_transfer.proto",
}
