// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: remote_shell.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RemoteShellService_AdminShell_FullMethodName  = "/modernrat.RemoteShellService/AdminShell"
	RemoteShellService_ClientShell_FullMethodName = "/modernrat.RemoteShellService/ClientShell"
)

// RemoteShellServiceClient is the client API for RemoteShellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RemoteShellService bridges the admin console with the remote user agent.
type RemoteShellServiceClient interface {
	// AdminShell streams commands from the admin to the user and returns output.
	AdminShell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellMessage, ShellMessage], error)
	// ClientShell streams availability and shell data from the user agent.
	ClientShell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellMessage, ShellMessage], error)
}

type remoteShellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteShellServiceClient(cc grpc.ClientConnInterface) RemoteShellServiceClient {
	return &remoteShellServiceClient{cc}
}

func (c *remoteShellServiceClient) AdminShell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellMessage, ShellMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteShellService_ServiceDesc.Streams[0], RemoteShellService_AdminShell_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShellMessage, ShellMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteShellService_AdminShellClient = grpc.BidiStreamingClient[ShellMessage, ShellMessage]

func (c *remoteShellServiceClient) ClientShell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellMessage, ShellMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteShellService_ServiceDesc.Streams[1], RemoteShellService_ClientShell_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShellMessage, ShellMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteShellService_ClientShellClient = grpc.BidiStreamingClient[ShellMessage, ShellMessage]

// RemoteShellServiceServer is the server API for RemoteShellService service.
// All implementations must embed UnimplementedRemoteShellServiceServer
// for forward compatibility.
//
// RemoteShellService bridges the admin console with the remote user agent.
type RemoteShellServiceServer interface {
	// AdminShell streams commands from the admin to the user and returns output.
	AdminShell(grpc.BidiStreamingServer[ShellMessage, ShellMessage]) error
	// ClientShell streams availability and shell data from the user agent.
	ClientShell(grpc.BidiStreamingServer[ShellMessage, ShellMessage]) error
	mustEmbedUnimplementedRemoteShellServiceServer()
}

// UnimplementedRemoteShellServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteShellServiceServer struct{}

func (UnimplementedRemoteShellServiceServer) AdminShell(grpc.BidiStreamingServer[ShellMessage, ShellMessage]) error {
	return status.Errorf(codes.Unimplemented, "method AdminShell not implemented")
}
func (UnimplementedRemoteShellServiceServer) ClientShell(grpc.BidiStreamingServer[ShellMessage, ShellMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ClientShell not implemented")
}
func (UnimplementedRemoteShellServiceServer) mustEmbedUnimplementedRemoteShellServiceServer() {}
func (UnimplementedRemoteShellServiceServer) testEmbeddedByValue()                            {}

// UnsafeRemoteShellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteShellServiceServer will
// result in compilation errors.
type UnsafeRemoteShellServiceServer interface {
	mustEmbedUnimplementedRemoteShellServiceServer()
}

func RegisterRemoteShellServiceServer(s grpc.ServiceRegistrar, srv RemoteShellServiceServer) {
	// If the following call pancis, it indicates UnimplementedRemoteShellServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemoteShellService_ServiceDesc, srv)
}

func _RemoteShellService_AdminShell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteShellServiceServer).AdminShell(&grpc.GenericServerStream[ShellMessage, ShellMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteShellService_AdminShellServer = grpc.BidiStreamingServer[ShellMessage, ShellMessage]

func _RemoteShellService_ClientShell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteShellServiceServer).ClientShell(&grpc.GenericServerStream[ShellMessage, ShellMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RemoteShellService_ClientShellServer = grpc.BidiStreamingServer[ShellMessage, ShellMessage]

// RemoteShellService_ServiceDesc is the grpc.ServiceDesc for RemoteShellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteShellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modernrat.RemoteShellService",
	HandlerType: (*RemoteShellServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdminShell",
			Handler:       _RemoteShellService_AdminShell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientShell",
			Handler:       _RemoteShellService_ClientShell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote_shell.proto",
}
