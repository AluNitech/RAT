// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.12.4
// source: remote_shell.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Remote shell message types. The direction of the message is noted per type.
type ShellMessageType int32

const (
	ShellMessageType_SHELL_MESSAGE_TYPE_UNSPECIFIED ShellMessageType = 0
	// Client -> Server: announce availability for remote shell.
	ShellMessageType_SHELL_MESSAGE_TYPE_REGISTER ShellMessageType = 1
	// Server -> Client: acknowledge registration.
	ShellMessageType_SHELL_MESSAGE_TYPE_REGISTERED ShellMessageType = 2
	// Admin -> Server and Server -> Client: request that a shell session be opened.
	ShellMessageType_SHELL_MESSAGE_TYPE_OPEN ShellMessageType = 3
	// Client -> Server and Server -> Admin: shell session is ready.
	ShellMessageType_SHELL_MESSAGE_TYPE_ACCEPTED ShellMessageType = 4
	// Admin -> Server -> Client: data written to the shell stdin.
	ShellMessageType_SHELL_MESSAGE_TYPE_STDIN ShellMessageType = 5
	// Client -> Server -> Admin: data read from the shell stdout.
	ShellMessageType_SHELL_MESSAGE_TYPE_STDOUT ShellMessageType = 6
	// Client -> Server -> Admin: data read from the shell stderr.
	ShellMessageType_SHELL_MESSAGE_TYPE_STDERR ShellMessageType = 7
	// Either direction: close the shell session.
	ShellMessageType_SHELL_MESSAGE_TYPE_CLOSE ShellMessageType = 8
	// Either direction: notify an error condition.
	ShellMessageType_SHELL_MESSAGE_TYPE_ERROR ShellMessageType = 9
	// Admin -> Server -> Client: resize the pseudo terminal window.
	ShellMessageType_SHELL_MESSAGE_TYPE_RESIZE ShellMessageType = 10
	// Client -> Server: heartbeat to keep the session alive.
	ShellMessageType_SHELL_MESSAGE_TYPE_HEARTBEAT ShellMessageType = 11
)

// Enum value maps for ShellMessageType.
var (
	ShellMessageType_name = map[int32]string{
		0:  "SHELL_MESSAGE_TYPE_UNSPECIFIED",
		1:  "SHELL_MESSAGE_TYPE_REGISTER",
		2:  "SHELL_MESSAGE_TYPE_REGISTERED",
		3:  "SHELL_MESSAGE_TYPE_OPEN",
		4:  "SHELL_MESSAGE_TYPE_ACCEPTED",
		5:  "SHELL_MESSAGE_TYPE_STDIN",
		6:  "SHELL_MESSAGE_TYPE_STDOUT",
		7:  "SHELL_MESSAGE_TYPE_STDERR",
		8:  "SHELL_MESSAGE_TYPE_CLOSE",
		9:  "SHELL_MESSAGE_TYPE_ERROR",
		10: "SHELL_MESSAGE_TYPE_RESIZE",
		11: "SHELL_MESSAGE_TYPE_HEARTBEAT",
	}
	ShellMessageType_value = map[string]int32{
		"SHELL_MESSAGE_TYPE_UNSPECIFIED": 0,
		"SHELL_MESSAGE_TYPE_REGISTER":    1,
		"SHELL_MESSAGE_TYPE_REGISTERED":  2,
		"SHELL_MESSAGE_TYPE_OPEN":        3,
		"SHELL_MESSAGE_TYPE_ACCEPTED":    4,
		"SHELL_MESSAGE_TYPE_STDIN":       5,
		"SHELL_MESSAGE_TYPE_STDOUT":      6,
		"SHELL_MESSAGE_TYPE_STDERR":      7,
		"SHELL_MESSAGE_TYPE_CLOSE":       8,
		"SHELL_MESSAGE_TYPE_ERROR":       9,
		"SHELL_MESSAGE_TYPE_RESIZE":      10,
		"SHELL_MESSAGE_TYPE_HEARTBEAT":   11,
	}
)

func (x ShellMessageType) Enum() *ShellMessageType {
	p := new(ShellMessageType)
	*p = x
	return p
}

func (x ShellMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_shell_proto_enumTypes[0].Descriptor()
}

func (ShellMessageType) Type() protoreflect.EnumType {
	return &file_remote_shell_proto_enumTypes[0]
}

func (x ShellMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShellMessageType.Descriptor instead.
func (ShellMessageType) EnumDescriptor() ([]byte, []int) {
	return file_remote_shell_proto_rawDescGZIP(), []int{0}
}

// ShellMessage carries data for a remote shell session.
type ShellMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Session identifier assigned by the server.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// User identifier associated with the session or registration.
	UserId string           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type   ShellMessageType `protobuf:"varint,3,opt,name=type,proto3,enum=modernrat.ShellMessageType" json:"type,omitempty"`
	// Binary payload for stdin/stdout/stderr data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Human readable message for status or errors.
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Optional exit code when a session terminates.
	ExitCode int32 `protobuf:"varint,6,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Optional terminal dimensions (columns x rows). Used with OPEN/RESIZE.
	Cols int32 `protobuf:"varint,7,opt,name=cols,proto3" json:"cols,omitempty"`
	Rows int32 `protobuf:"varint,8,opt,name=rows,proto3" json:"rows,omitempty"`
	// Unix timestamp provided for events like HEARTBEAT.
	Ts            int64 `protobuf:"varint,9,opt,name=ts,proto3" json:"ts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellMessage) Reset() {
	*x = ShellMessage{}
	mi := &file_remote_shell_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellMessage) ProtoMessage() {}

func (x *ShellMessage) ProtoReflect() protoreflect.Message {
	mi := &file_remote_shell_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellMessage.ProtoReflect.Descriptor instead.
func (*ShellMessage) Descriptor() ([]byte, []int) {
	return file_remote_shell_proto_rawDescGZIP(), []int{0}
}

func (x *ShellMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ShellMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShellMessage) GetType() ShellMessageType {
	if x != nil {
		return x.Type
	}
	return ShellMessageType_SHELL_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ShellMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShellMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ShellMessage) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ShellMessage) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *ShellMessage) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *ShellMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

var File_remote_shell_proto protoreflect.FileDescriptor

const file_remote_shell_proto_rawDesc = "" +
	"\n" +
	"\x12remote_shell.proto\x12\tmodernrat\"\xf4\x01\n" +
	"\fShellMessage\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12/\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1b.modernrat.ShellMessageTypeR\x04type\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x12\n" +
	"\x04text\x18\x05 \x01(\tR\x04text\x12\x1b\n" +
	"\texit_code\x18\x06 \x01(\x05R\bexitCode\x12\x12\n" +
	"\x04cols\x18\a \x01(\x05R\x04cols\x12\x12\n" +
	"\x04rows\x18\b \x01(\x05R\x04rows\x12\x0e\n" +
	"\x02ts\x18\t \x01(\x03R\x02ts*\x91\x03\n" +
	"\x10ShellMessageType\x12\"\n" +
	"\x1eSHELL_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bSHELL_MESSAGE_TYPE_REGISTER\x10\x01\x12!\n" +
	"\x1dSHELL_MESSAGE_TYPE_REGISTERED\x10\x02\x12\x1b\n" +
	"\x17SHELL_MESSAGE_TYPE_OPEN\x10\x03\x12\x1f\n" +
	"\x1bSHELL_MESSAGE_TYPE_ACCEPTED\x10\x04\x12\x1c\n" +
	"\x18SHELL_MESSAGE_TYPE_STDIN\x10\x05\x12\x1d\n" +
	"\x19SHELL_MESSAGE_TYPE_STDOUT\x10\x06\x12\x1d\n" +
	"\x19SHELL_MESSAGE_TYPE_STDERR\x10\a\x12\x1c\n" +
	"\x18SHELL_MESSAGE_TYPE_CLOSE\x10\b\x12\x1c\n" +
	"\x18SHELL_MESSAGE_TYPE_ERROR\x10\t\x12\x1d\n" +
	"\x19SHELL_MESSAGE_TYPE_RESIZE\x10\n" +
	"\x12 \n" +
	"\x1cSHELL_MESSAGE_TYPE_HEARTBEAT\x10\v2\x9d\x01\n" +
	"\x12RemoteShellService\x12B\n" +
	"\n" +
	"AdminShell\x12\x17.modernrat.ShellMessage\x1a\x17.modernrat.ShellMessage(\x010\x01\x12C\n" +
	"\vClientShell\x12\x17.modernrat.ShellMessage\x1a\x17.modernrat.ShellMessage(\x010\x01B\x1cZ\x1agithub.com/modernrat/protob\x06proto3"

var (
	file_remote_shell_proto_rawDescOnce sync.Once
	file_remote_shell_proto_rawDescData []byte
)

func file_remote_shell_proto_rawDescGZIP() []byte {
	file_remote_shell_proto_rawDescOnce.Do(func() {
		file_remote_shell_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_remote_shell_proto_rawDesc), len(file_remote_shell_proto_rawDesc)))
	})
	return file_remote_shell_proto_rawDescData
}

var file_remote_shell_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_remote_shell_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_remote_shell_proto_goTypes = []any{
	(ShellMessageType)(0), // 0: modernrat.ShellMessageType
	(*ShellMessage)(nil),  // 1: modernrat.ShellMessage
}
var file_remote_shell_proto_depIdxs = []int32{
	0, // 0: modernrat.ShellMessage.type:type_name -> modernrat.ShellMessageType
	1, // 1: modernrat.RemoteShellService.AdminShell:input_type -> modernrat.ShellMessage
	1, // 2: modernrat.RemoteShellService.ClientShell:input_type -> modernrat.ShellMessage
	1, // 3: modernrat.RemoteShellService.AdminShell:output_type -> modernrat.ShellMessage
	1, // 4: modernrat.RemoteShellService.ClientShell:output_type -> modernrat.ShellMessage
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_remote_shell_proto_init() }
func file_remote_shell_proto_init() {
	if File_remote_shell_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_remote_shell_proto_rawDesc), len(file_remote_shell_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_remote_shell_proto_goTypes,
		DependencyIndexes: file_remote_shell_proto_depIdxs,
		EnumInfos:         file_remote_shell_proto_enumTypes,
		MessageInfos:      file_remote_shell_proto_msgTypes,
	}.Build()
	File_remote_shell_proto = out.File
	file_remote_shell_proto_goTypes = nil
	file_remote_shell_proto_depIdxs = nil
}
