// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: screen_capture.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScreenCaptureService_AdminCapture_FullMethodName  = "/modernrat.ScreenCaptureService/AdminCapture"
	ScreenCaptureService_ClientCapture_FullMethodName = "/modernrat.ScreenCaptureService/ClientCapture"
)

// ScreenCaptureServiceClient is the client API for ScreenCaptureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ScreenCaptureService coordinates screen recording sessions.
type ScreenCaptureServiceClient interface {
	// AdminCapture connects the admin console to the capture relay hub.
	AdminCapture(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScreenCaptureMessage, ScreenCaptureMessage], error)
	// ClientCapture connects the user agent to provide video data.
	ClientCapture(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScreenCaptureMessage, ScreenCaptureMessage], error)
}

type screenCaptureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScreenCaptureServiceClient(cc grpc.ClientConnInterface) ScreenCaptureServiceClient {
	return &screenCaptureServiceClient{cc}
}

func (c *screenCaptureServiceClient) AdminCapture(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScreenCaptureMessage, ScreenCaptureMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScreenCaptureService_ServiceDesc.Streams[0], ScreenCaptureService_AdminCapture_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScreenCaptureMessage, ScreenCaptureMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScreenCaptureService_AdminCaptureClient = grpc.BidiStreamingClient[ScreenCaptureMessage, ScreenCaptureMessage]

func (c *screenCaptureServiceClient) ClientCapture(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScreenCaptureMessage, ScreenCaptureMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScreenCaptureService_ServiceDesc.Streams[1], ScreenCaptureService_ClientCapture_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScreenCaptureMessage, ScreenCaptureMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScreenCaptureService_ClientCaptureClient = grpc.BidiStreamingClient[ScreenCaptureMessage, ScreenCaptureMessage]

// ScreenCaptureServiceServer is the server API for ScreenCaptureService service.
// All implementations must embed UnimplementedScreenCaptureServiceServer
// for forward compatibility.
//
// ScreenCaptureService coordinates screen recording sessions.
type ScreenCaptureServiceServer interface {
	// AdminCapture connects the admin console to the capture relay hub.
	AdminCapture(grpc.BidiStreamingServer[ScreenCaptureMessage, ScreenCaptureMessage]) error
	// ClientCapture connects the user agent to provide video data.
	ClientCapture(grpc.BidiStreamingServer[ScreenCaptureMessage, ScreenCaptureMessage]) error
	mustEmbedUnimplementedScreenCaptureServiceServer()
}

// UnimplementedScreenCaptureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScreenCaptureServiceServer struct{}

func (UnimplementedScreenCaptureServiceServer) AdminCapture(grpc.BidiStreamingServer[ScreenCaptureMessage, ScreenCaptureMessage]) error {
	return status.Errorf(codes.Unimplemented, "method AdminCapture not implemented")
}
func (UnimplementedScreenCaptureServiceServer) ClientCapture(grpc.BidiStreamingServer[ScreenCaptureMessage, ScreenCaptureMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ClientCapture not implemented")
}
func (UnimplementedScreenCaptureServiceServer) mustEmbedUnimplementedScreenCaptureServiceServer() {}
func (UnimplementedScreenCaptureServiceServer) testEmbeddedByValue()                              {}

// UnsafeScreenCaptureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScreenCaptureServiceServer will
// result in compilation errors.
type UnsafeScreenCaptureServiceServer interface {
	mustEmbedUnimplementedScreenCaptureServiceServer()
}

func RegisterScreenCaptureServiceServer(s grpc.ServiceRegistrar, srv ScreenCaptureServiceServer) {
	// If the following call pancis, it indicates UnimplementedScreenCaptureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScreenCaptureService_ServiceDesc, srv)
}

func _ScreenCaptureService_AdminCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScreenCaptureServiceServer).AdminCapture(&grpc.GenericServerStream[ScreenCaptureMessage, ScreenCaptureMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScreenCaptureService_AdminCaptureServer = grpc.BidiStreamingServer[ScreenCaptureMessage, ScreenCaptureMessage]

func _ScreenCaptureService_ClientCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScreenCaptureServiceServer).ClientCapture(&grpc.GenericServerStream[ScreenCaptureMessage, ScreenCaptureMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScreenCaptureService_ClientCaptureServer = grpc.BidiStreamingServer[ScreenCaptureMessage, ScreenCaptureMessage]

// ScreenCaptureService_ServiceDesc is the grpc.ServiceDesc for ScreenCaptureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScreenCaptureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modernrat.ScreenCaptureService",
	HandlerType: (*ScreenCaptureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdminCapture",
			Handler:       _ScreenCaptureService_AdminCapture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientCapture",
			Handler:       _ScreenCaptureService_ClientCapture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "screen_capture.proto",
}
